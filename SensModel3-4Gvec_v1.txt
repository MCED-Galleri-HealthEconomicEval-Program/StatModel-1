# Galleri sensitivity model
# Model 3-4G: p constrained increasing with stage
# Constrained normal using "ones trick"
# cancer types in 'vec1' exchangeable across Ca types, defined by "class" (common heterogeneity within class)
# cancer types in 'vec2' independent
model{
for (j in 1:nCa){
  for(k in 1:4){
    s[j,k] ~ dbin(p[j,k],S[j,k])   # likelihood for each Ca and stage
    logit(p[j,k]) <- mu[j,k]       # model
    # calculate res deviance
    shat[j,k] <- p[j,k] * S[j,k]   # expected value of the numerators 
    dev[j,k] <- 2 * (s[j,k] * (log(s[j,k])-log(shat[j,k])) +  (S[j,k]-s[j,k]) * (log(S[j,k]-s[j,k]) - log(S[j,k]-shat[j,k])))
   }
  resdev[j] <- sum(dev[j, ])       # residual deviance contribution for this Ca type     
  for (k in 2:4){
  	# "ones trick" to constrain mu's to be increasing
#	z[j,k] <- 1  # BUGS specification does not work in JAGS - z must be given as data
	z[j,k] ~ dbern(c[j,k])
    c[j,k] <- step(mu[j,k]-mu[j,k-1])  # =1 if increasing, =0 o.w.
	}
 }
totresdev <- sum(resdev[])         # Total Residual Deviance
## Class model
for (k in 1:4){
  for (j in vec1){ mu[j,k] ~ dnorm(m[D[j],k], tau.m[D[j]]) }  # exchangeable within class
  for (j in vecn){ mu[j,k] ~ dnorm(0,.0001)  }  # independent
 }
# define priors
for (cl in 1:ncl){
  for (k in 1:4){  
    m[cl,k] ~ dnorm(0,.0001)
   }
  tau.m[cl] <- pow(sd.m[cl], -2)
  sd.m[cl] ~ dunif(0,5)
 }
}